apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'io.codearte.nexus-staging'

ext.publishProjects = subprojects.findAll { !it.hasProperty('beta') }

// OSSRH requires both javadoc and sources jars
publishProjects.each { prj ->
  prj.task('javadocJar', type: Jar) {
    from prj.javadoc
    classifier 'javadoc'
  }
  
  prj.task('sourcesJar', type: Jar) {
    from prj.sourceSets.main.allSource
    classifier 'sources'
  }
  
  prj.assemble.dependsOn prj.sourcesJar, prj.javadocJar
  
  artifacts {
    archives prj.jar, prj.javadocJar, prj.sourcesJar
  }
  
  
  prj.task('installLocally') {
    dependsOn prj.jar
    doLast {
      def cmd = "mvn install:install-file -Dfile=$prj.jar.archivePath -DgroupId=$prj.group -DartifactId=$prj.name -Dversion=$version -Dpackaging=jar"
      logger.quiet cmd
      cmd.execute()
    }
  }
  
}

// OSSRH also requires everything to be signed
signing {
  required { gradle.taskGraph.hasTask("uploadArchives") }
  sign configurations.archives
}

// Set nexusUsername/Password in ~/.gradle/gradle.properties or specify on command line using -P
ext {
  ossrhUsername = project.hasProperty('nexusUsername') ? nexusUsername : ''
  ossrhPassword = project.hasProperty('nexusPassword') ? nexusPassword : ''
}

uploadArchives {
  finalizedBy closeAndReleaseRepository
  repositories {
    mavenDeployer {
      beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

      repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
        authentication(userName: ossrhUsername, password: ossrhPassword)
      }

      snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots/') {
        authentication(userName: ossrhUsername, password: ossrhPassword)
      }
      
      publishProjects.each { prj ->
        // Separate out artifacts
        addFilter(prj.name) { artifact, file ->
          artifact.name == prj.name
        }
        
        pom(prj.name) {
          // OSSRH also requires certain info in the POM
          project {
            name prj.name
            description prj.description
            packaging 'jar'
            url 'https://github.com/SilkSource/silk'
    
            scm {
              connection 'https://github.com/SilkSource/silk.git'
              developerConnection 'https://github.com/SilkSource/silk.git'
              url 'https://github.com/SilkSource/silk.git'
            }
    
            licenses {
              license {
                name 'Apache Public License Version 2.0'
                url 'https://www.apache.org/licenses/LICENSE-2.0'
              }
            }
    
            developers {
              developer {
                id = 'ray'
                name = 'Remon Sinnema'
                organization = 'SilkSource'
                email = 'rssinnema@yahoo.com'
                timezone = 'Europe/Amsterdam'
              }
            }
          }
          // For some reason the dependencies don't come across, so do it manually
          withXml { 
            def dependenciesNode = asNode().appendNode('dependencies')
            prj.configurations.compile.allDependencies.each {
              def dependencyNode = dependenciesNode.appendNode('dependency')
              dependencyNode.appendNode('groupId', it.group)
              dependencyNode.appendNode('artifactId', it.name)
              dependencyNode.appendNode('version', it.version)
            }
          }
        }
      }
    }
  }
}

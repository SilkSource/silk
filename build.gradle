buildscript {
  repositories {
    jcenter()
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
  dependencies {
    classpath 'org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.6'
    classpath "net.serenity-bdd:serenity-gradle-plugin:$serenityVersion"
    classpath 'io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.11.0'
  }
}

apply plugin: 'eclipse'


subprojects {
  apply from: rootProject.file('java.gradle')
  apply from: rootProject.file('codestyle.gradle')
  apply from: rootProject.file('coverage.gradle')
  
  apply plugin: 'eclipse'
  eclipse.classpath {
    defaultOutputDir = file('classes')
    file.whenMerged { classpath ->
      classpath.entries.findAll { entry -> 
        entry.kind == 'src' && entry.path.contains('src') && entry.output.startsWith('bin/') 
      }.each { entry ->
        entry.output = entry.output.replace('bin/', 'classes/')
      }
      classpath.entries -= classpath.entries.findAll { entry -> 
        entry.kind == 'lib' && !file(entry.path).exists() 
      }
    }
  }
  rootProject.subprojects.collect { ":$it.name:compileTestJava" }.each { taskName ->
    tasks.eclipseClasspath.dependsOn taskName
  }
  rootProject.subprojects.collect { ":$it.name:clean" }.each { taskName ->
    tasks.eclipseClasspath.mustRunAfter taskName
  }
  
  repositories {
    mavenCentral()
  }
  
  configurations {
    asm
    commonsIo
    ecj
    jaCoCo  
    junit
    mockito
    serenityBdd
    snakeYaml
    
    testCompile.extendsFrom junit, mockito
  }
  
  dependencies {
    asm "org.ow2.asm:asm:$asmVersion"
    commonsIo "commons-io:commons-io:$commonsIoVersion"
    ecj "org.eclipse.jdt:ecj:$ecjVersion"
    jaCoCo "org.jacoco:org.jacoco.core:$jacocoVersion",
        "org.jacoco:org.jacoco.agent:$jacocoVersion"
    junit "org.junit.platform:junit-platform-launcher:$junit5Version",
        "org.junit.vintage:junit-vintage-engine:$junit4Version"
    mockito "org.mockito:mockito-core:$mockitoVersion"
    serenityBdd "net.serenity-bdd:serenity-screenplay:$serenityVersion",
      "net.serenity-bdd:serenity-junit:$serenityVersion"
    snakeYaml "org.yaml:snakeyaml:$snakeYamlVersion"
  }
  
}

apply from: 'publish.gradle'

defaultTasks 'build'


// [sonarToken] is encrypted in .travis.yml, so only available when building in Travis
if (project.hasProperty('sonarToken')) {
  System.setProperty('sonar.login', sonarToken)
  apply plugin: 'org.sonarqube'
  check.dependsOn 'sonarqube'
}



project(':coding') {
  configurations {
    compile.extendsFrom asm, commonsIo, ecj
  }
}



project(':auto-coding') {
  dependencies {
    compile project(':coding')
  }  
}



project(':continuous-testing') {
  configurations {
    compile.extendsFrom jaCoCo, junit, snakeYaml
  }

  dependencies {
    compile project(':coding')
    testCompile project(':coding').sourceSets.test.output
  }
}



project(':internal-spike') {
  configurations {
    compile.extendsFrom jaCoCo, junit
  }
  dependencies {
    compile project(':coding'), project(':auto-coding')
  }
}

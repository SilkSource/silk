buildscript {
  repositories {
    jcenter()
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
  dependencies {
    classpath 'org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.6'
    classpath "net.serenity-bdd:serenity-gradle-plugin:$serenityVersion"
    classpath 'io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.11.0'
  }
}

apply plugin: 'eclipse'

subprojects {
  apply plugin: 'java'
  apply from: rootProject.file('coverage.gradle')
  
  apply plugin: 'eclipse'
  eclipse.classpath {
    defaultOutputDir = file('classes')
    file.whenMerged { classpath ->
      classpath.entries.findAll { 
        it.kind == 'src' && it.output.startsWith('bin/') 
      }.each {
        it.output = it.output.replace('bin/', 'classes/')
      }
    }
  }
  
  apply plugin: 'net.serenity-bdd.aggregator'
  check.dependsOn checkOutcomes
  build.dependsOn aggregate
  
  task deleteTargetDir(type: Delete) {
    delete file('target')
  }
  
  task moveSerenityReportsToBuildDir(type: Copy) {
    from file('target/site')
    into reportsDir
    mustRunAfter checkOutcomes
    finalizedBy deleteTargetDir
  }
  
  aggregate.finalizedBy moveSerenityReportsToBuildDir
  
  tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:all" << "-Xlint:-processing" << "-Xlint:-serial" << "-Werror"
  }
  
  javadoc {
    def events = []
    StandardOutputListener listener = { event -> events << event }
    doFirst {
      logging.addStandardOutputListener(listener)
    }
    doLast {
      logging.removeStandardOutputListener(listener)
      if (events.find { it.toString() =~ /warning/ }) {
        throw new GradleException("Warnings in Javadoc, see output above");
      }
    }
  }

  // Need all test info on command-line for TravisCI
  test {
    testLogging {
      events "failed"
      showStandardStreams = true
      showStackTraces = true
      exceptionFormat "full"
    }
    outputs.upToDateWhen { false } // Always run tests so that we have a test report on each build
  }

  apply plugin: 'checkstyle'
  checkstyle {
    configFile = rootProject.file('config/checkstyle.xml')
    toolVersion = '8.1'
    ignoreFailures = false
  }

  // Despite ignoreFailures=false, the build won't by default fail on CheckStyle warnings
  // https://issues.gradle.org/browse/GRADLE-2888
  tasks.withType(Checkstyle).each { checkstyleTask ->
    checkstyleTask.doLast {
      reports.all { report ->
        def outputFile = report.destination
        if (outputFile.exists() && outputFile.text.contains("<error ")) {
          throw new GradleException("Found checkstyle issues in $outputFile")
        }
      }
    }
  }

  apply plugin: 'pmd'
  pmd {
    ruleSetFiles = rootProject.files('config/pmd.xml')
    toolVersion = '5.4.1'
    ignoreFailures = false
  }

  apply plugin: 'findbugs'
  findbugs {
    toolVersion = '3.0.1'
    excludeFilter = rootProject.file('config/findbugs_filter.xml')
    ignoreFailures = false
  }

  repositories {
    jcenter()
  }
}

apply from: 'publish.gradle'

defaultTasks 'build'


// [sonarToken] is encrypted in .travis.yml, so only available when building in Travis
if (project.hasProperty('sonarToken')) {
  System.setProperty('sonar.login', sonarToken)
  apply plugin: 'org.sonarqube'
  check.dependsOn 'sonarqube'
}

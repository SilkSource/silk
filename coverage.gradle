apply plugin: 'jacoco'

jacoco {
  toolVersion = jacocoVersion
}

def has(sourceSet) {
  !sourceSet.allJava.files.empty
}

task testsExistVerification {
  doLast {
    if (has(project.sourceSets.main) && !has(project.sourceSets.test)) {
      throw new GradleException("Project '$project.name' contains code, but no tests at all")
    }
  }
}

def excludeSpikesFrom(files) {
  project.files(files.collect { dir ->
    fileTree(dir) {
      exclude '**/spike/*'
    }
  })
}

def initCap(text) {
  text.toLowerCase().capitalize()
}

def getCoverageMinimumFor(limit) {
  new BigDecimal(project.getProperty("min${initCap(limit.counter)}Coverage"))
}

jacocoTestCoverageVerification {
  afterEvaluate {
    classDirectories = excludeSpikesFrom(classDirectories)
    sourceDirectories = excludeSpikesFrom(sourceDirectories)
  }
  if (!project.name.startsWith('internal') && !project.hasProperty('beta')) {
    violationRules {
      rule {
        limit {
          counter = 'LINE'
        }
        limit {
          counter = 'COMPLEXITY'
        }
        limit {
          counter = 'BRANCH'
        }
        limits.each { limit ->
          limit.minimum = getCoverageMinimumFor(limit)
        }
      }
    }
    finalizedBy testsExistVerification
  }
}

jacocoTestReport {
  reports {
    xml.enabled true
  }
  afterEvaluate {
    classDirectories = excludeSpikesFrom(classDirectories)
    sourceDirectories = excludeSpikesFrom(sourceDirectories)
  }
  finalizedBy jacocoTestCoverageVerification
}

test {
  finalizedBy jacocoTestReport
}
